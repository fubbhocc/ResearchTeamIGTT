package com.siat.researchteamigtt;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;

import java.util.ArrayList;
import java.util.List;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class IGTTMainActivity extends Activity {

    private enum Action {
        INSTRUCTIONS(R.string.INSTRUCTIONS,R.drawable.beach),
        XING_LEI(R.string.XING_LEI, R.drawable.xinglei),
        XIE_YAO_QIN(R.string.XIE_YAO_QIN, R.drawable.xieyaoqin),
        WANG_LEI(R.string.WANG_LEI, R.drawable.wanglei),
        GU_JIA(R.string.GU_JIA, R.drawable.gujia),
        CHEN_YAN(R.string.CHEN_YAN, R.drawable.chenyan),
        ZHOU_SHOU_JUN(R.string.ZHOU_SHOU_JUN, R.drawable.zhoushoujun),
        ZHOU_YUNG_JIN(R.string.ZHOU_YUNG_JIN, R.drawable.zhouyongjin),
        LI_ZHI_CHENG(R.string.LI_ZHI_CHENG, R.drawable.lizhicheng),
        XIONG_JIN(R.string.XIONG_JING, R.drawable.xiongjin),
        WEN_NING(R.string.WEN_NING, R.drawable.wenning),
        RONG_ZI(R.string.RONG_YI, R.drawable.rongzi),
        WANG_LE_JING(R.string.WANG_LE_JING, R.drawable.wanglejing);

        final int textId;
        final int imageId;

        Action(int textId, int imageId) {
            this.textId = textId;
            this.imageId = imageId;
        }
    }

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;
    private CardAdapterWithMutations mAdapter;

    CardScrollView getScroller() {
        return mCardScroller;
    }
    
    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

//        mView = buildView();

        mCardScroller = new CardScrollView(this);
        setupAdapter();
        setupClickListener();
        setContentView(mCardScroller);
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);
    }

    private void setupAdapter() {
        mAdapter = new CardAdapterWithMutations();

        //CardBuilder card = new CardBuilder(this, CardBuilder.Layout.CAPTION).addImage(R.drawable.beach).setText(R.string.INSTRUCTIONS);
        
        // Insert initial cards, one of each kind.
        for (int i = 0; i < 13; i++) {
            int position = i;
            Action action = Action.values()[i];
            if(i==0) {
                CardBuilder card = new CardBuilder(this, CardBuilder.Layout.);
                card.setText(action.textId).addImage(action.imageId).setFootnote(R.string.Footnote);
                mAdapter.insertCardWithoutNotification(position, card, action);
            }
           else {
                CardBuilder card = new CardBuilder(this, CardBuilder.Layout.COLUMNS_FIXED);
                card.setText(action.textId).addImage(action.imageId).setFootnote(R.string.Footnote);
                mAdapter.insertCardWithoutNotification(position, card, action);
            }
        }

        // Setting adapter notifies the card scroller of new content.
        mCardScroller.setAdapter(mAdapter);
    }

    private final class CardAdapterWithMutations extends CardAdapter {

        private final List<Action> mActions;

        public CardAdapterWithMutations() {
            super(new ArrayList<CardBuilder>());
            mActions = new ArrayList<Action>();
        }

        /** Inserts a card into the adapter, without notifying. */

        public void insertCardWithoutNotification(int position, CardBuilder card, Action action) {
            mCards.add(position, card);
            mActions.add(position, action);
        }


        /** Deletes card from the adapter, without notifying. */
/*        public void deleteCardWithoutNotification(int position) {
            mCards.remove(position);
            mActions.remove(position);
        }*/

        /** Returns the action associated with the card at position. */
        public Action getActionAt(int position) {
            return mActions.get(position);
        }
    }


    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    private void setupClickListener() {
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                /*switch (mAdapter.getActionAt(position)) {
                    case DELETION_HERE:
                        am.playSoundEffect(Sounds.TAP);
                        deleteCard(position);
                        break;
                    case NAVIGATION_TO_BEGIN:
                        am.playSoundEffect(Sounds.TAP);
                        navigateToCard(0);
                        break;
                    case NAVIGATION_TO_END:
                        am.playSoundEffect(Sounds.TAP);
                        navigateToCard(mAdapter.getCount() - 1);
                        break;
                    case INSERTION_AT_BEGIN:
                        am.playSoundEffect(Sounds.TAP);
                        insertNewCard(0);
                        break;
                    case INSERTION_BEFORE:
                        am.playSoundEffect(Sounds.TAP);
                        insertNewCard(position);
                        break;
                    case INSERTION_AFTER:
                        am.playSoundEffect(Sounds.TAP);
                        insertNewCard(position + 1);
                        break;
                    case INSERTION_AT_END:
                        am.playSoundEffect(Sounds.TAP);
                        insertNewCard(mAdapter.getCount());
                        break;
                    default:
                        am.playSoundEffect(Sounds.DISALLOWED);
                        break;
                }*/
            }
        });
    }
}
